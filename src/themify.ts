import fs from 'fs'
import path from 'path'
import mimeType from 'mime-types'
import { imageSize } from 'image-size'
import { toFixed } from './utils.js'

type ThemeChar = { width: number; height: number; data: string }
export type ThemeMap = Record<string, Record<string, ThemeChar>>

const themePath = path.resolve(process.cwd(), 'assets/theme')
const imgExts = new Set(['.jpg', '.jpeg', '.png', '.gif', '.webp'])

export const themeList: ThemeMap = {}

for (const theme of fs.readdirSync(themePath)) {
	const current = path.resolve(themePath, theme)
	if (!fs.statSync(current).isDirectory()) continue
	if (!(theme in themeList)) themeList[theme] = {}
	for (const img of fs.readdirSync(current)) {
		const ext = path.extname(img).toLowerCase()
		if (!imgExts.has(ext)) continue
    const fp = path.resolve(current, img)
    const char = path.parse(img).name
		const buf = fs.readFileSync(fp)
		const dim = imageSize(buf)
    const width = dim.width ?? 0
    const height = dim.height ?? 0
    const bucket = (themeList[theme] ||= {})
    bucket[char] = { width, height, data: toDataUri(fp) }
	}
}

function toDataUri(fp: string): string {
	const mime = mimeType.lookup(fp) || 'application/octet-stream'
	const base64 = fs.readFileSync(fp).toString('base64')
	return `data:${mime};base64,${base64}`
}

export function getThemeList() { return themeList }

export function getCountImage(params: {
	count: string | number
	theme?: string
	padding?: number
	prefix?: number
	offset?: number
	align?: 'top' | 'center' | 'bottom'
	scale?: number
	pixelated?: '0' | '1'
	darkmode?: '0' | '1' | 'auto'
}): string {
	let { count, theme = 'moebooru', padding = 7, prefix = -1, offset = 0, align = 'top', scale = 1, pixelated = '1', darkmode = 'auto' } = params
	if (!(theme in themeList)) theme = 'moebooru'
	padding = parseInt(String(padding), 10)
	offset = parseFloat(String(offset))
	scale = parseFloat(String(scale))

	const countArray = String(count).padStart(padding, '0').split('')
	if (prefix >= 0) countArray.unshift(...String(prefix).split(''))
	const t = themeList[theme]!
	if (t['_start']) countArray.unshift('_start')
	if (t['_end']) countArray.push('_end')

	const filtered = countArray.filter(c => t[c])
	const unique = [...new Set(filtered)]
	let x = 0, y = 0

	const defs = unique.reduce((ret, cur) => {
		const el = t[cur]!
		let { width, height, data } = el
		width *= scale
		height *= scale
		y = Math.max(y, height)
		return `${ret}\n    <image id="${cur}" width="${toFixed(width, 5)}" height="${toFixed(height, 5)}" xlink:href="${data}" />`
	}, '')

	const parts = filtered.reduce((ret, cur) => {
		const el = t[cur]!
		let { width, height } = el
		width *= scale
		height *= scale
		let yOffset = 0
		if (align === 'center') yOffset = (y - height) / 2
		else if (align === 'bottom') yOffset = y - height
		const image = `${ret}\n    <use x="${toFixed(x, 5)}"${yOffset ? ` y="${toFixed(yOffset, 5)}"` : ''} xlink:href="#${cur}" />`
		x += width + offset
		return image
	}, '')

	x -= offset

	const style = `\n  svg {\n    ${pixelated === '1' ? 'image-rendering: pixelated;' : ''}\n    ${darkmode === '1' ? 'filter: brightness(.6);' : ''}\n  }\n  ${darkmode === 'auto' ? `@media (prefers-color-scheme: dark) { svg { filter: brightness(.6); } }` : ''}\n  `

	return `<?xml version="1.0" encoding="UTF-8"?>\n<!-- Generated by MoeV-Counter -->\n<svg viewBox="0 0 ${toFixed(x, 5)} ${toFixed(y, 5)}" width="${toFixed(x, 5)}" height="${toFixed(y, 5)}" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <title>Moe Counter!</title>\n  <style>${style}</style>\n  <defs>${defs}\n  </defs>\n  <g>${parts}\n  </g>\n</svg>\n`
}


